Функция ПолучитьСхемуКомпоновкиДанных() Экспорт

	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	
	ТаблицаИменПолей.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		НоваяСтрока = ТаблицаИменПолей.Добавить();
		НоваяСтрока.УсловноеОбозначение = СтрокаТаблицы.УсловноеОбозначение;
		НоваяСтрока.ИмяПоля = ПолучитьИмяПоля(СтрокаТаблицы.УсловноеОбозначение);
	КонецЦикла; 
	
	ИменаПолей = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
		ИменаПолей.Вставить(СтрокаТаблицы.УсловноеОбозначение, СтрокаТаблицы.ИмяПоля);
	КонецЦикла; 
	
	СоответствиеСпособовРасчетаИерархии = Новый Соответствие;
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Сумма, "Сумма");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Среднее, "Среднее");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Максимум, "Максимум");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Минимум, "Минимум");
	
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	// источник
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	// набор данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.ИмяОбъекта = "Данные";
	
	// поля
	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "Период";
	Поле.ПутьКДанным = Поле.Поле;
	Поле.Заголовок = "Период";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));

	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "Контрагент";
	Поле.ПутьКДанным = Поле.Поле;
	Поле.Заголовок = "Контрагент";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		ИмяПоля = ИменаПолей.Получить(СтрокаТаблицы.УсловноеОбозначение);
		// поля
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок = СтрокаТаблицы.Наименование;
		Поле.ТипЗначения = Метаданные.ОпределяемыеТипы.ТипЗначенияПоказателя.Тип;
		Поле.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=4");
		// ресурсы (итог по контрагенту)
		ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение = "Сумма(" + ИмяПоля + ")";
		ПолеИтога.Группировки.Очистить();
		ПолеИтога.Группировки.Добавить("Контрагент");
		// ресурсы (итог по иерархии)
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособРасчетаИерархии) 
			И СтрокаТаблицы.СпособРасчетаИерархии <> Перечисления.СпособыРасчетаИерархии.Нет Тогда
			ТекВыражение = "";
			ТекСпособ = СоответствиеСпособовРасчетаИерархии.Получить(СтрокаТаблицы.СпособРасчетаИерархии);
			Если ТекСпособ <> Неопределено Тогда
				ТекВыражение = ТекСпособ + "(" + ИмяПоля + ")";
			ИначеЕсли СтрокаТаблицы.СпособРасчетаИерархии = Перечисления.СпособыРасчетаИерархии.ПоФормуле Тогда 
				ИспользуемыеУсловныеОбозначения = ОбщегоНазначенияСервер.ПолучитьИспользуемыеУсловныеОбозначения(СтрокаТаблицы.ФормулаРасчетаИерархииСКД);
				ФормулаДляРасчета = СтрокаТаблицы.ФормулаРасчетаИерархииСКД;
				Для Каждого ТекУслОбозн Из ИспользуемыеУсловныеОбозначения Цикл
					ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[" + ТекУслОбозн + "]", ИменаПолей.Получить(ТекУслОбозн));
				КонецЦикла; 
				ТекВыражение = ФормулаДляРасчета;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ТекВыражение) Тогда
				ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.ПутьКДанным = ИмяПоля;
				ПолеИтога.Выражение = ТекВыражение;
				ПолеИтога.Группировки.Очистить();
				ПолеИтога.Группировки.Добавить("Контрагент Иерархия");
				ПолеИтога.Группировки.Добавить("Период");
				ПолеИтога.Группировки.Добавить("ОбщийИтог");
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать выражение для расчета иерархии для показателя """ + ИмяПоля + """!"); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	//ВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Добавить();
	//ВариантНастроек.Имя = "Основной";
	//НастройкиКомпоновкиДанных = ВариантНастроек.Настройки;
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	// группировки
	Группировка1 = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Период");
	ПолеГруппировки.Использование = Истина;
	АвтоПоле = Группировка1.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	АвтоПоле = Группировка1.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	Группировка2 = Группировка1.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	АвтоПоле = Группировка2.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	АвтоПоле = Группировка2.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	// выводимые поля
	ТЗ = ТаблицаПоказателей.Скопировать(, "Родитель");
	ТЗ.Свернуть("Родитель");
	ТЗ.Сортировать("Родитель");
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		ТекРодитель = СтрокаТЗ.Родитель;
		ВыбраннаяГруппа = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбраннаяГруппа.Заголовок = ТекРодитель.Наименование;
		ВыбраннаяГруппа.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ВыбраннаяГруппа.Использование = Истина;
		Для Каждого СтрокаТаблицы Из ТаблицаПоказателей.НайтиСтроки(Новый Структура("Родитель", ТекРодитель)) Цикл
			ИмяПоля = ИменаПолей.Получить(СтрокаТаблицы.УсловноеОбозначение);
			//ВыбранноеПоле = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле = ВыбраннаяГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			ВыбранноеПоле.Использование = Истина;
		КонецЦикла;	
	КонецЦикла; 
	
	// пользовательские настройки
	ИдентификаторПользовательскойНастройки = "ПрограммныеПользовательскиеНастройки";
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки + "_ОтборПоКонтрагенту";
	ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Контрагенты";
	
	НастройкиКомпоновкиДанных.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки + "_ВыводимыеПоля";
	НастройкиКомпоновкиДанных.Выбор.ПредставлениеПользовательскойНастройки = "Выводимые показатели";
	
	
	// параметры вывода
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", "Зеленый");
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции	

Функция ПолучитьИмяПоля(УсловноеОбозначение)
	
	Стр = УсловноеОбозначение;
	Если Найти(Стр, "(") > 0 Тогда
		Стр = СтрЗаменить(Стр, "(", "_СкобкаОткр_");
		Стр = СтрЗаменить(Стр, "-", "_Минус_");
		Стр = СтрЗаменить(Стр, "+", "_Плюс_");
		Стр = СтрЗаменить(Стр, ")", "_СкобкаЗакр_");
		Стр = "_" + Стр;
	КонецЕсли; 
	
	Возврат "_" + Стр;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей)
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Период");
	Данные.Колонки.Добавить("Контрагент");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		Данные.Колонки.Добавить(СтрокаТаблицы.УсловноеОбозначение);
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанные()
	
	Если ОбщегоНазначенияКлиентСервер.ПериодичностьУстановлена(Периодичность) Тогда
		Данные = ПолучитьПериодичныеДанные();
	Иначе 
		Данные = ПолучитьНепериодичныеДанные();
	КонецЕсли;

	Возврат Данные;
	
КонецФункции

Функция ПолучитьНепериодичныеДанные()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата1", Дата1);
	СтруктураПараметров.Вставить("Дата2", Дата2);
	СтруктураПараметров.Вставить("Периодичность", Периодичность);
	СтруктураПараметров.Вставить("СтандартОтчетности", СтандартОтчетности);

	ИсходныеДанные = ФормированиеОтчетовСервер.ПолучитьНепериодичныеДанные(СтруктураПараметров);
	
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	Данные = ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей);

	Для Каждого СтрокаТаблицы Из ИсходныеДанные Цикл
		НоваяСтрока = Данные.Добавить(); 
		НоваяСтрока.Период = СтрокаТаблицы.Период;
		НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
		НоваяСтрока[СтрокаТаблицы.УсловноеОбозначение] = СтрокаТаблицы.ЗначениеПоказателя;
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыДанных_Плоская()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Период");
	Данные.Колонки.Добавить("Контрагент");
	Данные.Колонки.Добавить("Показатель");
	Данные.Колонки.Добавить("ЗначениеПоказателя");
	Данные.Колонки.Добавить("Установлен");
	Данные.Колонки.Добавить("Разница");
	Данные.Колонки.Добавить("РазницаПроц");
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьВидимыеПоля(ЭлементыВыбора)

	Результат = Новый Массив; 
	
	Для Каждого ТекЭлемент Из ЭлементыВыбора Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТекЭлемент.Использование Тогда
				ПодчиненныеВидимые = ПолучитьВидимыеПоля(ТекЭлемент.Элементы);
				Если ПодчиненныеВидимые = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли; 
				Для Каждого ТекПоле Из ПодчиненныеВидимые Цикл
					Результат.Добавить(ТекПоле);
				КонецЦикла; 
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ТекЭлемент.Использование Тогда
				Результат.Добавить(ТекЭлемент.Поле);
			КонецЕсли;
		Иначе 
			// авто-поле (Тип("АвтоВыбранноеПолеКомпоновкиДанных")) или что-то похлеще
			Возврат Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьМассивПоказателейДляРасчета()
	
	ПоказателиДляОтбора = Неопределено;
	
	Если ФлагИспользоватьСокращенныйРасчет Тогда
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		ПоказателиДляОтбора = ПолучитьВидимыеПоля(Настройки.Выбор.Элементы);
		Если ПоказателиДляОтбора <> Неопределено Тогда
			Если ПоказателиДляОтбора.Количество() = 0 Тогда
				// либо не выбрано ни одного поля, либо что-то пошло не так
				ПоказателиДляОтбора = Неопределено;
			Иначе 
				// есть выбранные поля; нужно по выбранным полям получить условные обозначения показателей
				УслОбознПолей = Новый Соответствие;
				Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
					УслОбознПолей.Вставить(Новый ПолеКомпоновкиДанных(СтрокаТаблицы.ИмяПоля), СтрокаТаблицы.УсловноеОбозначение);
				КонецЦикла; 
				ВремМассив = Новый Массив;
				Для Каждого ТекПоле Из ПоказателиДляОтбора Цикл
					ТекУслОбозн = УслОбознПолей.Получить(ТекПоле);
					Если ТекУслОбозн = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внутреннняя ошибка! Не удалось получить условное обозначение показателия для поля """ + ТекПоле + """!");
						ВремМассив = Неопределено;
						Прервать;
					Иначе 
						ВремМассив.Добавить(ТекУслОбозн);
					КонецЕсли; 
				КонецЦикла; 
				ПоказателиДляОтбора = ВремМассив;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПоказателиДляОтбора = Неопределено Тогда
		
		Возврат ФормированиеОтчетовСервер.ПолучитьМассивПоказателейДляРасчета();
		
	КонецЕсли;
	
	УсловныеОбозначенияВидимых = ПоказателиДляОтбора;
	
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	УсловныеОбозначенияВлияющих = ОбщегоНазначенияСервер.ПолучитьУсловныеОбозначенияВсехВлияющихПоказателей(УсловныеОбозначенияВидимых, ТаблицаПоказателей, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Расчетный
	|	И НЕ Показатели.ЭтоГруппа
	|	И НЕ Показатели.ПометкаУдаления
	|	И (Показатели.УсловноеОбозначение В (&УсловныеОбозначенияВидимых)
	|			ИЛИ Показатели.УсловноеОбозначение В (&УсловныеОбозначенияВлияющих))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатели.Порядок";
	Запрос.УстановитьПараметр("УсловныеОбозначенияВидимых", УсловныеОбозначенияВидимых);
	Запрос.УстановитьПараметр("УсловныеОбозначенияВлияющих", УсловныеОбозначенияВлияющих);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьПериодичныеДанные()	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата1", Дата1);
	СтруктураПараметров.Вставить("Дата2", Дата2);
	СтруктураПараметров.Вставить("Периодичность", Периодичность);
	СтруктураПараметров.Вставить("СтандартОтчетности", СтандартОтчетности);
	СтруктураПараметров.Вставить("КолвоПериодовДляОсмотраНазад", КолвоПериодовДляОсмотраНазад);
	СтруктураПараметров.Вставить("МассивПоказателейДляРасчета", ПолучитьМассивПоказателейДляРасчета());
	СтруктураПараметров.Вставить("ОтборПоКонтрагенту", ФормированиеОтчетовСервер.ПолучитьСтруктуруОтбораПоКонтрагенту(КомпоновщикНастроек.ПолучитьНастройки()));
	
	ИсходныеДанные = ФормированиеОтчетовСервер.ПолучитьПериодичныеДанные(СтруктураПараметров);

	// результат
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	Данные = ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей);
	Для Каждого СтрокаТаблицы Из ИсходныеДанные Цикл
		НоваяСтрока = Данные.Добавить(); 
		НоваяСтрока.Период = СтрокаТаблицы.Период;
		НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
		НоваяСтрока[СтрокаТаблицы.УсловноеОбозначение] = СтрокаТаблицы.ЗначениеПоказателя;
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьУсловноеОформлениеПоказателей(Настройки)
	
	Если 1=2 Тогда
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли; 
	
	Префикс = "__$$";
	Суффикс = "$$__";
	
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);
	
	МассивУдаляемых = Новый Массив; 
	Для Каждого ЭлементУО Из Настройки.УсловноеОформление.Элементы Цикл
		Если Лев(ЭлементУО.Представление, ДлинаПрефикса) = Префикс
			И Прав(ЭлементУО.Представление, ДлинаСуффикса) = Суффикс Тогда
			МассивУдаляемых.Добавить(ЭлементУО);
		КонецЕсли; 
	КонецЦикла; 
	Для Каждого ЭлементУО Из МассивУдаляемых Цикл
		Настройки.УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла; 
	
	Если НЕ ФлагИспользоватьВыделениеЦветом Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаПолей = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
		ИменаПолей.Вставить(СтрокаТаблицы.УсловноеОбозначение, СтрокаТаблицы.ИмяПоля);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиУсловноеОформление.Ссылка КАК Ссылка,
	|	ПоказателиУсловноеОформление.Ссылка.Наименование КАК Наименование,
	|	ПоказателиУсловноеОформление.Ссылка.Код КАК Код,
	|	ПоказателиУсловноеОформление.Ссылка.УсловноеОбозначение КАК УсловноеОбозначение,
	|	ПоказателиУсловноеОформление.НомерСтроки КАК НомерСтроки,
	|	ПоказателиУсловноеОформление.ЗначениеОт КАК ЗначениеОт,
	|	ПоказателиУсловноеОформление.ЗначениеДо КАК ЗначениеДо,
	|	ПоказателиУсловноеОформление.ЦветФона.ЦветСтрокой КАК ЦветФонаСтрокой
	|ИЗ
	|	Справочник.Показатели.УсловноеОформление КАК ПоказателиУсловноеОформление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗначениеОт,
	|	ЗначениеДо";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекПоле = Новый ПолеКомпоновкиДанных(ИменаПолей.Получить(Выборка.УсловноеОбозначение));
		
		ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУО.Представление = Префикс + Выборка.Наименование + "_" + Выборка.Код + "_" + Выборка.НомерСтроки + Суффикс;
		
		ЭлементУО.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВОтборе = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВПараметрах = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		ЦветФона = Справочники.Цвета.ПолучитьЦветИзСтроки(Выборка.ЦветФонаСтрокой);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = ТекПоле;
		ОформляемоеПоле.Использование = Истина;
		
		ГруппаИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОт = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОт.ЛевоеЗначение		= ТекПоле;
		ЭлементОт.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОт.ПравоеЗначение	= Выборка.ЗначениеОт;
		ЭлементОт.Использование		= Истина;
		
		ЭлементДо = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДо.ЛевоеЗначение		= ТекПоле;
		ЭлементДо.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементДо.ПравоеЗначение	= Выборка.ЗначениеДо;
		ЭлементДо.Использование		= Истина;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Данные = ПолучитьДанные();
	
	Для Каждого Колонка Из Данные.Колонки Цикл
		Если Найти(",Период,Контрагент,", "," + Колонка.Имя + ",") = 0 Тогда
			Колонка.Имя = ПолучитьИмяПоля(Колонка.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	ВнешниеДанные = Новый Структура("Данные", Данные);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	Если 1=2 Тогда
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли; 
	
	ФорматДаты = ОбщегоНазначенияКлиентСервер.ПолучитьФорматРедактированияДаты(Периодичность);
	НастройкаФормата = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("Период").Оформление.Элементы.Найти("Формат");
	НастройкаФормата.Использование = ЗначениеЗаполнено(ФорматДаты);
	НастройкаФормата.Значение = ФорматДаты;
	
	ДобавитьУсловноеОформлениеПоказателей(КомпоновщикНастроек.Настройки);
		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	//ТЗ = Новый ТаблицаЗначений; 
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.УстановитьОбъект(ТЗ);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры

