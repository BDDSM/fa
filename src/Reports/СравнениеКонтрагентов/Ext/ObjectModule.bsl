Функция ПолучитьСхемуКомпоновкиДанных() Экспорт

	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	
	ТаблицаИменПолей.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		НоваяСтрока = ТаблицаИменПолей.Добавить();
		НоваяСтрока.УсловноеОбозначение = СтрокаТаблицы.УсловноеОбозначение;
		НоваяСтрока.ИмяПоля = ПолучитьИмяПоля(СтрокаТаблицы.УсловноеОбозначение);
	КонецЦикла; 
	
	ИменаПолей = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
		ИменаПолей.Вставить(СтрокаТаблицы.УсловноеОбозначение, СтрокаТаблицы.ИмяПоля);
	КонецЦикла; 
	
	СоответствиеСпособовРасчетаИерархии = Новый Соответствие;
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Сумма, "Сумма");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Среднее, "Среднее");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Максимум, "Максимум");
	СоответствиеСпособовРасчетаИерархии.Вставить(Перечисления.СпособыРасчетаИерархии.Минимум, "Минимум");
	
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	// источник
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	// набор данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.ИмяОбъекта = "Данные";
	
	// поля
	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "Период";
	Поле.ПутьКДанным = Поле.Поле;
	Поле.Заголовок = "Период";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));

	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "Контрагент";
	Поле.ПутьКДанным = Поле.Поле;
	Поле.Заголовок = "Контрагент";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		ИмяПоля = ИменаПолей.Получить(СтрокаТаблицы.УсловноеОбозначение);
		// поля
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок = СтрокаТаблицы.Наименование;
		Поле.ТипЗначения = Метаданные.ОпределяемыеТипы.ТипЗначенияПоказателя.Тип;
		Поле.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=4");
		// ресурсы (итог по контрагенту)
		ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение = "Сумма(" + ИмяПоля + ")";
		ПолеИтога.Группировки.Очистить();
		ПолеИтога.Группировки.Добавить("Контрагент");
		// ресурсы (итог по иерархии)
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособРасчетаИерархии) 
			И СтрокаТаблицы.СпособРасчетаИерархии <> Перечисления.СпособыРасчетаИерархии.Нет Тогда
			ТекВыражение = "";
			ТекСпособ = СоответствиеСпособовРасчетаИерархии.Получить(СтрокаТаблицы.СпособРасчетаИерархии);
			Если ТекСпособ <> Неопределено Тогда
				ТекВыражение = ТекСпособ + "(" + ИмяПоля + ")";
			ИначеЕсли СтрокаТаблицы.СпособРасчетаИерархии = Перечисления.СпособыРасчетаИерархии.ПоФормуле Тогда 
				ИспользуемыеУсловныеОбозначения = ОбщегоНазначенияСервер.ПолучитьИспользуемыеУсловныеОбозначения(СтрокаТаблицы.ФормулаРасчетаИерархииСКД);
				ФормулаДляРасчета = СтрокаТаблицы.ФормулаРасчетаИерархииСКД;
				Для Каждого ТекУслОбозн Из ИспользуемыеУсловныеОбозначения Цикл
					ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[" + ТекУслОбозн + "]", ИменаПолей.Получить(ТекУслОбозн));
				КонецЦикла; 
				ТекВыражение = ФормулаДляРасчета;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ТекВыражение) Тогда
				ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.ПутьКДанным = ИмяПоля;
				ПолеИтога.Выражение = ТекВыражение;
				ПолеИтога.Группировки.Очистить();
				ПолеИтога.Группировки.Добавить("Контрагент Иерархия");
				ПолеИтога.Группировки.Добавить("Период");
				ПолеИтога.Группировки.Добавить("ОбщийИтог");
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать выражение для расчета иерархии для показателя """ + ИмяПоля + """!"); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	//ВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Добавить();
	//ВариантНастроек.Имя = "Основной";
	//НастройкиКомпоновкиДанных = ВариантНастроек.Настройки;
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	// группировки
	Группировка1 = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Период");
	ПолеГруппировки.Использование = Истина;
	АвтоПоле = Группировка1.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	АвтоПоле = Группировка1.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	Группировка2 = Группировка1.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	АвтоПоле = Группировка2.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	АвтоПоле = Группировка2.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	// выводимые поля
	ТЗ = ТаблицаПоказателей.Скопировать(, "Родитель");
	ТЗ.Свернуть("Родитель");
	ТЗ.Сортировать("Родитель");
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		ТекРодитель = СтрокаТЗ.Родитель;
		ВыбраннаяГруппа = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбраннаяГруппа.Заголовок = ТекРодитель.Наименование;
		ВыбраннаяГруппа.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ВыбраннаяГруппа.Использование = Истина;
		Для Каждого СтрокаТаблицы Из ТаблицаПоказателей.НайтиСтроки(Новый Структура("Родитель", ТекРодитель)) Цикл
			ИмяПоля = ИменаПолей.Получить(СтрокаТаблицы.УсловноеОбозначение);
			//ВыбранноеПоле = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле = ВыбраннаяГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			ВыбранноеПоле.Использование = Истина;
		КонецЦикла;	
	КонецЦикла; 
	
	// пользовательские настройки
	ИдентификаторПользовательскойНастройки = "ПрограммныеПользовательскиеНастройки";
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки + "_ОтборПоКонтрагенту";
	ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Контрагенты";
	
	НастройкиКомпоновкиДанных.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки + "_ВыводимыеПоля";
	НастройкиКомпоновкиДанных.Выбор.ПредставлениеПользовательскойНастройки = "Выводимые показатели";
	
	
	// параметры вывода
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", "Зеленый");
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции	

Функция ПолучитьИмяПоля(УсловноеОбозначение)
	
	Стр = УсловноеОбозначение;
	Если Найти(Стр, "(") > 0 Тогда
		Стр = СтрЗаменить(Стр, "(", "_СкобкаОткр_");
		Стр = СтрЗаменить(Стр, "-", "_Минус_");
		Стр = СтрЗаменить(Стр, "+", "_Плюс_");
		Стр = СтрЗаменить(Стр, ")", "_СкобкаЗакр_");
		Стр = "_" + Стр;
	КонецЕсли; 
	
	Возврат "_" + Стр;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей)
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Период");
	Данные.Колонки.Добавить("Контрагент");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		Данные.Колонки.Добавить(СтрокаТаблицы.УсловноеОбозначение);
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанные()
	
	Если ОбщегоНазначенияКлиентСервер.ПериодичностьУстановлена(Периодичность) Тогда
		Данные = ПолучитьПериодичныеДанные();
	Иначе 
		Данные = ПолучитьНепериодичныеДанные();
	КонецЕсли;

	Возврат Данные;
	
КонецФункции

Функция ПолучитьНепериодичныеДанные()
	
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	Данные = ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей);

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Период КАК Период,
	|	ЗначенияПоказателей.Контрагент КАК Контрагент,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	ЗначенияПоказателей.Показатель.УсловноеОбозначение КАК УсловноеОбозначение,
	|	ЗначенияПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ИСТИНА КАК Установлен
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателей КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Период МЕЖДУ &Дата1 И &Дата2
	|	И ЗначенияПоказателей.Периодичность = &Периодичность
	|	И ЗначенияПоказателей.СтандартОтчетности В (&СтандартОтчетности, &ПустойСтандартОтчетности)";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата1));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("СтандартОтчетности", СтандартОтчетности);
	Запрос.УстановитьПараметр("ПустойСтандартОтчетности", Справочники.СтандартыОтчетности.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Данные.Добавить(); 
		НоваяСтрока.Период = Выборка.Период;
		НоваяСтрока.Контрагент = Выборка.Контрагент;
		НоваяСтрока[Выборка.УсловноеОбозначение] = Выборка.ЗначениеПоказателя;
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыДанных_Плоская()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Период");
	Данные.Колонки.Добавить("Контрагент");
	Данные.Колонки.Добавить("Показатель");
	Данные.Колонки.Добавить("ЗначениеПоказателя");
	Данные.Колонки.Добавить("Установлен");
	Данные.Колонки.Добавить("Разница");
	Данные.Колонки.Добавить("РазницаПроц");
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьВидимыеПоля(ЭлементыВыбора)

	Результат = Новый Массив; 
	
	Для Каждого ТекЭлемент Из ЭлементыВыбора Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТекЭлемент.Использование Тогда
				ПодчиненныеВидимые = ПолучитьВидимыеПоля(ТекЭлемент.Элементы);
				Если ПодчиненныеВидимые = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли; 
				Для Каждого ТекПоле Из ПодчиненныеВидимые Цикл
					Результат.Добавить(ТекПоле);
				КонецЦикла; 
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ТекЭлемент.Использование Тогда
				Результат.Добавить(ТекЭлемент.Поле);
			КонецЕсли;
		Иначе 
			// авто-поле (Тип("АвтоВыбранноеПолеКомпоновкиДанных")) или что-то похлеще
			Возврат Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьМассивПоказателейДляРасчета()
	
	ПоказателиДляОтбора = Неопределено;
	
	Если ФлагИспользоватьСокращенныйРасчет Тогда
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		ПоказателиДляОтбора = ПолучитьВидимыеПоля(Настройки.Выбор.Элементы);
		Если ПоказателиДляОтбора <> Неопределено Тогда
			Если ПоказателиДляОтбора.Количество() = 0 Тогда
				// либо не выбрано ни одного поля, либо что-то пошло не так
				ПоказателиДляОтбора = Неопределено;
			Иначе 
				// есть выбранные поля; нужно по выбранным полям получить условные обозначения показателей
				УслОбознПолей = Новый Соответствие;
				Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
					УслОбознПолей.Вставить(Новый ПолеКомпоновкиДанных(СтрокаТаблицы.ИмяПоля), СтрокаТаблицы.УсловноеОбозначение);
				КонецЦикла; 
				ВремМассив = Новый Массив;
				Для Каждого ТекПоле Из ПоказателиДляОтбора Цикл
					ТекУслОбозн = УслОбознПолей.Получить(ТекПоле);
					Если ТекУслОбозн = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внутреннняя ошибка! Не удалось получить условное обозначение показателия для поля """ + ТекПоле + """!");
						ВремМассив = Неопределено;
						Прервать;
					Иначе 
						ВремМассив.Добавить(ТекУслОбозн);
					КонецЕсли; 
				КонецЦикла; 
				ПоказателиДляОтбора = ВремМассив;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если ПоказателиДляОтбора = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Показатели.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Показатели КАК Показатели
		|ГДЕ
		|	Показатели.Расчетный
		|	И НЕ Показатели.ЭтоГруппа
		|	И НЕ Показатели.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Показатели.Порядок";
		
	Иначе
		
		УсловныеОбозначенияВидимых = ПоказателиДляОтбора;
		
		ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
		УсловныеОбозначенияВлияющих = ОбщегоНазначенияСервер.ПолучитьУсловныеОбозначенияВсехВлияющихПоказателей(УсловныеОбозначенияВидимых, ТаблицаПоказателей, Истина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Показатели.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Показатели КАК Показатели
		|ГДЕ
		|	Показатели.Расчетный
		|	И НЕ Показатели.ЭтоГруппа
		|	И НЕ Показатели.ПометкаУдаления
		|	И (Показатели.УсловноеОбозначение В (&УсловныеОбозначенияВидимых)
		|			ИЛИ Показатели.УсловноеОбозначение В (&УсловныеОбозначенияВлияющих))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Показатели.Порядок";
		Запрос.УстановитьПараметр("УсловныеОбозначенияВидимых", УсловныеОбозначенияВидимых);
		Запрос.УстановитьПараметр("УсловныеОбозначенияВлияющих", УсловныеОбозначенияВлияющих);
		
	КонецЕсли; 

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьПериодичныеДанные()	
	
	РазрядностьОтчета = 4; // макс.число знаков дробной части для расчётных показателей
	
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	ТаблицаДанных = ПолучитьСтруктуруТаблицыДанных_Плоская();
	ТаблицаДанных.Колонки.Добавить("ИндексПериода");
	ТаблицаДанных.Колонки.Добавить("УсловноеОбозначение");
	ТаблицаДанных.Индексы.Добавить("ИндексПериода, Контрагент, Показатель");
	ТаблицаДанных.Индексы.Добавить("Контрагент");
	
	Если 1=2 Тогда
		ТаблицаДанных = Новый ТаблицаЗначений; 
	КонецЕсли; 
	
	КонтрагентДляОтбора = Неопределено;
	КонтрагентДляОтбора_ВидСравнения = Неопределено;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.Использование
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент")
			И (
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Контрагенты")
				Или ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений")
			) Тогда
			КонтрагентДляОтбора = ЭлементОтбора.ПравоеЗначение;
			КонтрагентДляОтбора_ВидСравнения = ЭлементОтбора.ВидСравнения;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Период КАК Период,
	|	ЗначенияПоказателей.Контрагент КАК Контрагент,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	ЗначенияПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТ_ЗначенияПериодичныхПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателей КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Период МЕЖДУ &ДатаНачалаОсмотра И &Дата2
	|	И ЗначенияПоказателей.Периодичность = &Периодичность
	|	И ЗначенияПоказателей.СтандартОтчетности В (&СтандартОтчетности, &ПустойСтандартОтчетности)
	|	И &ОтборПоКонтрагенту
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Контрагент,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ЗначенияПериодичныхПоказателей.Период КАК Период,
	|	&ВыражениеКонцаПериода КАК КонецПериода,
	|	ВТ_ЗначенияПериодичныхПоказателей.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_КонтрагентыИПериоды
	|ИЗ
	|	ВТ_ЗначенияПериодичныхПоказателей КАК ВТ_ЗначенияПериодичныхПоказателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателей.Период КАК ПериодДляСреза,
	|	ВТ_КонтрагентыИПериоды.Период КАК Период,
	|	ВТ_КонтрагентыИПериоды.Контрагент КАК Контрагент,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	ЗначенияПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТ_ДанныеДляСрезаНепериодичных
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателей КАК ЗначенияПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонтрагентыИПериоды КАК ВТ_КонтрагентыИПериоды
	|		ПО (ЗначенияПоказателей.Период <= ВТ_КонтрагентыИПериоды.КонецПериода
	|				ИЛИ (ВТ_КонтрагентыИПериоды.Период = &ДатаПоследнегоПериода
	|					И ЗначенияПоказателей.Показатель.ИспользоватьПоследнееЗначениеДляПоследнегоПериода))
	|			И ЗначенияПоказателей.Контрагент = ВТ_КонтрагентыИПериоды.Контрагент
	|ГДЕ
	|	ЗначенияПоказателей.Периодичность В (&ПериодичностьНет, &ПустаяПериодичность)
	|	И ЗначенияПоказателей.СтандартОтчетности В (&СтандартОтчетности, &ПустойСтандартОтчетности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Контрагент,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДляСрезаНепериодичных.Период КАК Период,
	|	ВТ_ДанныеДляСрезаНепериодичных.Контрагент КАК Контрагент,
	|	ВТ_ДанныеДляСрезаНепериодичных.Показатель КАК Показатель,
	|	ВТ_ДанныеДляСрезаНепериодичных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТ_ЗначенияНепериодичныхПоказателей
	|ИЗ
	|	ВТ_ДанныеДляСрезаНепериодичных КАК ВТ_ДанныеДляСрезаНепериодичных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ДанныеДляСрезаНепериодичных.Период КАК Период,
	|			ВТ_ДанныеДляСрезаНепериодичных.Контрагент КАК Контрагент,
	|			ВТ_ДанныеДляСрезаНепериодичных.Показатель КАК Показатель,
	|			МАКСИМУМ(ВТ_ДанныеДляСрезаНепериодичных.ПериодДляСреза) КАК ПериодДляСреза
	|		ИЗ
	|			ВТ_ДанныеДляСрезаНепериодичных КАК ВТ_ДанныеДляСрезаНепериодичных
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ДанныеДляСрезаНепериодичных.Период,
	|			ВТ_ДанныеДляСрезаНепериодичных.Контрагент,
	|			ВТ_ДанныеДляСрезаНепериодичных.Показатель) КАК ВложенныйЗапрос
	|		ПО ВТ_ДанныеДляСрезаНепериодичных.ПериодДляСреза = ВложенныйЗапрос.ПериодДляСреза
	|			И ВТ_ДанныеДляСрезаНепериодичных.Период = ВложенныйЗапрос.Период
	|			И ВТ_ДанныеДляСрезаНепериодичных.Контрагент = ВложенныйЗапрос.Контрагент
	|			И ВТ_ДанныеДляСрезаНепериодичных.Показатель = ВложенныйЗапрос.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияПериодичныхПоказателей.Период КАК Период,
	|	ВТ_ЗначенияПериодичныхПоказателей.Контрагент КАК Контрагент,
	|	ВТ_ЗначенияПериодичныхПоказателей.Показатель КАК Показатель,
	|	ВТ_ЗначенияПериодичныхПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТ_ЗначенияПоказателей
	|ИЗ
	|	ВТ_ЗначенияПериодичныхПоказателей КАК ВТ_ЗначенияПериодичныхПоказателей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗначенияНепериодичныхПоказателей.Период,
	|	ВТ_ЗначенияНепериодичныхПоказателей.Контрагент,
	|	ВТ_ЗначенияНепериодичныхПоказателей.Показатель,
	|	ВТ_ЗначенияНепериодичныхПоказателей.ЗначениеПоказателя
	|ИЗ
	|	ВТ_ЗначенияНепериодичныхПоказателей КАК ВТ_ЗначенияНепериодичныхПоказателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Контрагент,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Ссылка КАК Показатель,
	|	Показатели.УстановленоЗначениеПоУмолчанию КАК УстановленоЗначениеПоУмолчанию,
	|	Показатели.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|ГДЕ
	|	НЕ Показатели.Расчетный
	|	И НЕ Показатели.ЭтоГруппа
	|	И НЕ Показатели.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтрагентыИПериоды.Период КАК Период,
	|	ВТ_КонтрагентыИПериоды.Контрагент КАК Контрагент,
	|	ВТ_Показатели.Показатель КАК Показатель,
	|	ВТ_Показатели.УстановленоЗначениеПоУмолчанию КАК УстановленоЗначениеПоУмолчанию,
	|	ВТ_Показатели.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ПОМЕСТИТЬ ВТ_Матрица
	|ИЗ
	|	ВТ_КонтрагентыИПериоды КАК ВТ_КонтрагентыИПериоды,
	|	ВТ_Показатели КАК ВТ_Показатели
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Контрагент,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Матрица.Период КАК Период,
	|	ВТ_Матрица.Контрагент КАК Контрагент,
	|	ВТ_Матрица.Показатель КАК Показатель,
	|	ВТ_Матрица.Показатель.УсловноеОбозначение КАК УсловноеОбозначение,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_ЗначенияПоказателей.ЗначениеПоказателя ЕСТЬ NULL
	|			ТОГДА ВТ_ЗначенияПоказателей.ЗначениеПоказателя
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Матрица.УстановленоЗначениеПоУмолчанию
	|					ТОГДА ВТ_Матрица.ЗначениеПоУмолчанию
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗначениеПоказателя,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_ЗначенияПоказателей.ЗначениеПоказателя ЕСТЬ NULL
	|				ИЛИ ВТ_Матрица.УстановленоЗначениеПоУмолчанию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Установлен
	|ИЗ
	|	ВТ_Матрица КАК ВТ_Матрица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияПоказателей КАК ВТ_ЗначенияПоказателей
	|		ПО ВТ_Матрица.Период = ВТ_ЗначенияПоказателей.Период
	|			И ВТ_Матрица.Контрагент = ВТ_ЗначенияПоказателей.Контрагент
	|			И ВТ_Матрица.Показатель = ВТ_ЗначенияПоказателей.Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Контрагент
	|ИТОГИ ПО
	|	Период,
	|	Контрагент
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачалаОсмотра", НачалоДня(ОбщегоНазначенияКлиентСервер.ДобавитьПериоды(Дата1, Периодичность, -КолвоПериодовДляОсмотраНазад)));
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата1));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	Запрос.УстановитьПараметр("ДатаПоследнегоПериода", ОбщегоНазначенияКлиентСервер.ПолучитьДатуНачалаПериода(Дата2, Периодичность));
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ПериодичностьНет", Перечисления.Периодичность.Нет);
	Запрос.УстановитьПараметр("ПустаяПериодичность", Перечисления.Периодичность.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтандартОтчетности", СтандартОтчетности);
	Запрос.УстановитьПараметр("ПустойСтандартОтчетности", Справочники.СтандартыОтчетности.ПустаяСсылка());
	
	ВыражениеКонцаПериода = "КОНЕЦПЕРИОДА(Период, ДЕНЬ)";
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ВыражениеКонцаПериода = "КОНЕЦПЕРИОДА(Период, ГОД)";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ВыражениеКонцаПериода = "КОНЕЦПЕРИОДА(Период, КВАРТАЛ)";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ВыражениеКонцаПериода = "КОНЕЦПЕРИОДА(Период, МЕСЯЦ)";
	КонецЕсли; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеКонцаПериода", ВыражениеКонцаПериода);
	
	ОтборПоКонтрагенту = "";
	Если ЗначениеЗаполнено(КонтрагентДляОтбора) Тогда
		Если КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			ОтборПоКонтрагенту = "Контрагент В ИЕРАРХИИ(&КонтрагентДляОтбора)";
		ИначеЕсли КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
			Или КонтрагентДляОтбора_ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ОтборПоКонтрагенту = "НЕ Контрагент В ИЕРАРХИИ(&КонтрагентДляОтбора)";
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ПустаяСтрока(ОтборПоКонтрагенту) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонтрагенту", ОтборПоКонтрагенту);
		Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);
	Иначе 
		Запрос.УстановитьПараметр("ОтборПоКонтрагенту", Истина);
	КонецЕсли; 
	
	МассивПоказателейДляРасчета = ПолучитьМассивПоказателейДляРасчета();
	УсловныеОбозначения = Новый Соответствие;
	Для Каждого Показатель Из МассивПоказателейДляРасчета Цикл
		УсловныеОбозначения.Вставить(Показатель, Показатель.УсловноеОбозначение);
	КонецЦикла; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоПериодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПериодам.Следующий() Цикл
		
		// сменился период - уменьшаем все индексы периодов на 1
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			СтрокаДанных.ИндексПериода = СтрокаДанных.ИндексПериода - 1;
		КонецЦикла; 
		
		ВыборкаПоКонтрагентам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагентам.Следующий() Цикл
			
			ЗначенияПоказателей = Новый Соответствие;
			
			ТЗТек = Новый ТаблицаЗначений;
			ТЗТек.Колонки.Добавить("Показатель");
			ТЗТек.Колонки.Добавить("ЗначениеПоказателя");
			ТЗТек.Колонки.Добавить("Установлен");
			ТЗТек.Колонки.Добавить("УсловноеОбозначение");
			
			// добавим значения периодических показателей
			Выборка = ВыборкаПоКонтрагентам.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекЗнач = Выборка.ЗначениеПоказателя;
				ЗначенияПоказателей.Вставить(Выборка.УсловноеОбозначение, ТекЗнач);
				ЗначенияПоказателей.Вставить(Выборка.УсловноеОбозначение + "(0)", ТекЗнач);
				ЗаполнитьЗначенияСвойств(ТЗТек.Добавить(), Выборка);
			КонецЦикла;
			
			Если ВыборкаПоПериодам.Период >= Дата1 Тогда
			
				// добавим значения прошлых показателей
				Фильтр = Новый Структура("Контрагент", ВыборкаПоКонтрагентам.Контрагент); 
				Для Каждого СтрокаДанных Из ТаблицаДанных.НайтиСтроки(Фильтр) Цикл
					Если НЕ СтрокаДанных.Установлен Тогда
						Продолжить;
					КонецЕсли; 
					ТекУслОбозн = СтрокаДанных.УсловноеОбозначение + "(" + Формат(СтрокаДанных.ИндексПериода, "ЧГ=") + ")";
					ЗначенияПоказателей.Вставить(ТекУслОбозн, СтрокаДанных.ЗначениеПоказателя);
				КонецЦикла; 
				
				// расчёт показателей
				Для Каждого Показатель Из МассивПоказателейДляРасчета Цикл
					ТекЗнач = ОбщегоНазначенияСервер.РассчитатьЗначениеПоказателя(ЗначенияПоказателей, Показатель);
					Установлен = Истина;
					Если ТекЗнач <> Неопределено Тогда
						ТекЗнач = Окр(ТекЗнач, РазрядностьОтчета);
						Установлен = Истина
					Иначе 
						Установлен = Ложь;
					КонецЕсли; 
					ТекУслОбозн = УсловныеОбозначения.Получить(Показатель);
					ЗначенияПоказателей.Вставить(Показатель, ТекЗнач);
					ЗначенияПоказателей.Вставить(ТекУслОбозн + "(0)", ТекЗнач);
					НоваяСтрока = ТЗТек.Добавить(); 
					НоваяСтрока.Показатель			= Показатель;
					НоваяСтрока.ЗначениеПоказателя	= ТекЗнач;
					НоваяСтрока.Установлен			= Установлен;
					НоваяСтрока.УсловноеОбозначение	= ТекУслОбозн;
				КонецЦикла; 
				
			Иначе 
				// показатели с Период < Дата1 (aka "дата начала периода отчёта") нужны только для расчёта показателей "с индексами", 
				// и для них нужны [скорее всего] только исходные данные, поэтому не будем тратить время и считать расчетные показатели
			КонецЕсли; 
			
			// перенос рассчитанных данных в таблицу
			Для Каждого СтрокаТЗ Из ТЗТек Цикл
				НоваяСтрока = ТаблицаДанных.Добавить(); 
				НоваяСтрока.ИндексПериода 		= 0; // для тек.периода индекс = 0
				НоваяСтрока.Период				= ВыборкаПоПериодам.Период;
				НоваяСтрока.Контрагент			= ВыборкаПоКонтрагентам.Контрагент;
				НоваяСтрока.Показатель			= СтрокаТЗ.Показатель;
				НоваяСтрока.ЗначениеПоказателя	= СтрокаТЗ.ЗначениеПоказателя;
				НоваяСтрока.Установлен			= СтрокаТЗ.Установлен;
				НоваяСтрока.УсловноеОбозначение	= СтрокаТЗ.УсловноеОбозначение;
				Если НоваяСтрока.Установлен Тогда
					// вычисляем разницу между текущим и прошлым периодом
					СтруктураПоиска = Новый Структура("ИндексПериода, Контрагент, Показатель", -1, НоваяСтрока.Контрагент, НоваяСтрока.Показатель);
					НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					СтрокаПредПериода = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], Неопределено);
					Если СтрокаПредПериода <> Неопределено И СтрокаПредПериода.Установлен Тогда
						НоваяСтрока.Разница		= НоваяСтрока.ЗначениеПоказателя - СтрокаПредПериода.ЗначениеПоказателя;
						НоваяСтрока.РазницаПроц	= ?(ЗначениеЗаполнено(СтрокаПредПериода.ЗначениеПоказателя), 
													Окр(НоваяСтрока.Разница / СтрокаПредПериода.ЗначениеПоказателя * 100, РазрядностьОтчета),
													0);
													
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 

	// результат
	Данные = ПолучитьСтруктуруТаблицыДанных(ТаблицаПоказателей);
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.Период >= Дата1 Тогда
			НоваяСтрока = Данные.Добавить(); 
			НоваяСтрока.Период = СтрокаДанных.Период;
			НоваяСтрока.Контрагент = СтрокаДанных.Контрагент;
			НоваяСтрока[СтрокаДанных.УсловноеОбозначение] = СтрокаДанных.ЗначениеПоказателя;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьУсловноеОформлениеПоказателей(Настройки)
	
	Если 1=2 Тогда
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли; 
	
	Префикс = "__$$";
	Суффикс = "$$__";
	
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);
	
	МассивУдаляемых = Новый Массив; 
	Для Каждого ЭлементУО Из Настройки.УсловноеОформление.Элементы Цикл
		Если Лев(ЭлементУО.Представление, ДлинаПрефикса) = Префикс
			И Прав(ЭлементУО.Представление, ДлинаСуффикса) = Суффикс Тогда
			МассивУдаляемых.Добавить(ЭлементУО);
		КонецЕсли; 
	КонецЦикла; 
	Для Каждого ЭлементУО Из МассивУдаляемых Цикл
		Настройки.УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла; 
	
	Если НЕ ФлагИспользоватьВыделениеЦветом Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаПолей = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаИменПолей Цикл
		ИменаПолей.Вставить(СтрокаТаблицы.УсловноеОбозначение, СтрокаТаблицы.ИмяПоля);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиУсловноеОформление.Ссылка КАК Ссылка,
	|	ПоказателиУсловноеОформление.Ссылка.Наименование КАК Наименование,
	|	ПоказателиУсловноеОформление.Ссылка.Код КАК Код,
	|	ПоказателиУсловноеОформление.Ссылка.УсловноеОбозначение КАК УсловноеОбозначение,
	|	ПоказателиУсловноеОформление.НомерСтроки КАК НомерСтроки,
	|	ПоказателиУсловноеОформление.ЗначениеОт КАК ЗначениеОт,
	|	ПоказателиУсловноеОформление.ЗначениеДо КАК ЗначениеДо,
	|	ПоказателиУсловноеОформление.ЦветФона.ЦветСтрокой КАК ЦветФонаСтрокой
	|ИЗ
	|	Справочник.Показатели.УсловноеОформление КАК ПоказателиУсловноеОформление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗначениеОт,
	|	ЗначениеДо";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекПоле = Новый ПолеКомпоновкиДанных(ИменаПолей.Получить(Выборка.УсловноеОбозначение));
		
		ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУО.Представление = Префикс + Выборка.Наименование + "_" + Выборка.Код + "_" + Выборка.НомерСтроки + Суффикс;
		
		ЭлементУО.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВОтборе = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВПараметрах = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		ЦветФона = Справочники.Цвета.ПолучитьЦветИзСтроки(Выборка.ЦветФонаСтрокой);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = ТекПоле;
		ОформляемоеПоле.Использование = Истина;
		
		ГруппаИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОт = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОт.ЛевоеЗначение		= ТекПоле;
		ЭлементОт.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОт.ПравоеЗначение	= Выборка.ЗначениеОт;
		ЭлементОт.Использование		= Истина;
		
		ЭлементДо = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДо.ЛевоеЗначение		= ТекПоле;
		ЭлементДо.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементДо.ПравоеЗначение	= Выборка.ЗначениеДо;
		ЭлементДо.Использование		= Истина;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Данные = ПолучитьДанные();
	
	Для Каждого Колонка Из Данные.Колонки Цикл
		Если Найти(",Период,Контрагент,", "," + Колонка.Имя + ",") = 0 Тогда
			Колонка.Имя = ПолучитьИмяПоля(Колонка.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	ВнешниеДанные = Новый Структура("Данные", Данные);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	Если 1=2 Тогда
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли; 
	
	ФорматДаты = ОбщегоНазначенияКлиентСервер.ПолучитьФорматРедактированияДаты(Периодичность);
	НастройкаФормата = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("Период").Оформление.Элементы.Найти("Формат");
	НастройкаФормата.Использование = ЗначениеЗаполнено(ФорматДаты);
	НастройкаФормата.Значение = ФорматДаты;
	
	ДобавитьУсловноеОформлениеПоказателей(КомпоновщикНастроек.Настройки);
		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	//ТЗ = Новый ТаблицаЗначений; 
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.УстановитьОбъект(ТЗ);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры

