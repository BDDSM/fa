Процедура ДобавитьУсловноеОформлениеПоказателей(Настройки)
	
	Если 1=2 Тогда
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли; 
	
	Префикс = "__$$";
	Суффикс = "$$__";
	
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);
	
	МассивУдаляемых = Новый Массив; 
	Для Каждого ЭлементУО Из Настройки.УсловноеОформление.Элементы Цикл
		Если Лев(ЭлементУО.Представление, ДлинаПрефикса) = Префикс
			И Прав(ЭлементУО.Представление, ДлинаСуффикса) = Суффикс Тогда
			МассивУдаляемых.Добавить(ЭлементУО);
		КонецЕсли; 
	КонецЦикла; 
	Для Каждого ЭлементУО Из МассивУдаляемых Цикл
		Настройки.УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла; 
	
	Если НЕ ФлагИспользоватьВыделениеЦветом Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиУсловноеОформление.Ссылка КАК Ссылка,
	|	ПоказателиУсловноеОформление.Ссылка.Наименование КАК Наименование,
	|	ПоказателиУсловноеОформление.Ссылка.Код КАК Код,
	|	ПоказателиУсловноеОформление.НомерСтроки КАК НомерСтроки,
	|	ПоказателиУсловноеОформление.ЗначениеОт КАК ЗначениеОт,
	|	ПоказателиУсловноеОформление.ЗначениеДо КАК ЗначениеДо,
	|	ПоказателиУсловноеОформление.ЦветФона.ЦветСтрокой КАК ЦветФонаСтрокой
	|ИЗ
	|	Справочник.Показатели.УсловноеОформление КАК ПоказателиУсловноеОформление";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ПолеПоказатель = Новый ПолеКомпоновкиДанных("Показатель");
	ПолеЗначениеПоказателя = Новый ПолеКомпоновкиДанных("ЗначениеПоказателя");
	ПолеУстановлен = Новый ПолеКомпоновкиДанных("Установлен");
	//ПараметрЦветФона = Новый ПараметрКомпоновкиДанных("ЦветФона");
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУО.Представление = Префикс + Выборка.Наименование + "_" + Выборка.Код + "_" + Выборка.НомерСтроки + Суффикс;
		
		ЭлементУО.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		ЭлементУО.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВОтборе = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУО.ИспользоватьВПараметрах = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		ЦветФона = Справочники.Цвета.ПолучитьЦветИзСтроки(Выборка.ЦветФонаСтрокой);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = ПолеЗначениеПоказателя;
		ОформляемоеПоле.Использование = Истина;
		
		ГруппаИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементПоказатель = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементПоказатель.ЛевоеЗначение		= ПолеПоказатель;
		ЭлементПоказатель.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементПоказатель.ПравоеЗначение	= Выборка.Ссылка;
		ЭлементПоказатель.Использование		= Истина;
		
		ЭлементОт = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОт.ЛевоеЗначение		= ПолеЗначениеПоказателя;
		ЭлементОт.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОт.ПравоеЗначение	= Выборка.ЗначениеОт;
		ЭлементОт.Использование		= Истина;
		
		ЭлементДо = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДо.ЛевоеЗначение		= ПолеЗначениеПоказателя;
		ЭлементДо.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементДо.ПравоеЗначение	= Выборка.ЗначениеДо;
		ЭлементДо.Использование		= Истина;
		
		ЭлементУстановлен = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУстановлен.ЛевоеЗначение		= ПолеУстановлен;
		ЭлементУстановлен.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУстановлен.ПравоеЗначение	= Истина;
		ЭлементУстановлен.Использование		= Истина;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьМассивПоказателейДляРасчета()
	
	ПоказателиДляОтбора = Неопределено;
	
	Если ФлагИспользоватьСокращенныйРасчет Тогда
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.Использование
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатель")
				И (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии)
				И (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Показатели") 
					Или ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений")) Тогда
				ПоказателиДляОтбора = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ПоказателиДляОтбора = Неопределено Тогда
		
		Возврат ФормированиеОтчетовСервер.ПолучитьМассивПоказателейДляРасчета();
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Расчетный
	|	И НЕ Показатели.ЭтоГруппа
	|	И НЕ Показатели.ПометкаУдаления
	|	И (Показатели.Ссылка В ИЕРАРХИИ (&ПоказателиДляОтбора)
	|			ИЛИ Показатели.УсловноеОбозначение В (&УсловныеОбозначения))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатели.Порядок";
	Запрос.УстановитьПараметр("ПоказателиДляОтбора", ПоказателиДляОтбора);
	Запрос.УстановитьПараметр("УсловныеОбозначения", Новый Массив); // пока пустой массив
	
	МассивПоказателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаПоказателей = ОбщегоНазначенияСервер.ПолучитьТаблицуПоказателей();
	УсловныеОбозначения = ОбщегоНазначенияСервер.ПолучитьУсловныеОбозначенияВсехВлияющихПоказателей(МассивПоказателей, ТаблицаПоказателей, Истина);
	
	// текст запроса не изменился, но список условных обозначений теперь заполнен
	Запрос.УстановитьПараметр("ПоказателиДляОтбора", ПоказателиДляОтбора);
	Запрос.УстановитьПараметр("УсловныеОбозначения", УсловныеОбозначения);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьДанные()
	
	Если ОбщегоНазначенияКлиентСервер.ПериодичностьУстановлена(Периодичность) Тогда
		Данные = ПолучитьПериодичныеДанные();
	Иначе 
		Данные = ПолучитьНепериодичныеДанные();
	КонецЕсли;

	Возврат Данные;
	
КонецФункции

Функция ПолучитьНепериодичныеДанные()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата1", Дата1);
	СтруктураПараметров.Вставить("Дата2", Дата2);
	СтруктураПараметров.Вставить("Периодичность", Периодичность);
	СтруктураПараметров.Вставить("СтандартОтчетности", СтандартОтчетности);

	Данные = ФормированиеОтчетовСервер.ПолучитьНепериодичныеДанные(СтруктураПараметров);
	
	Возврат Данные;
	
КонецФункции
	
Функция ПолучитьПериодичныеДанные()	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата1", Дата1);
	СтруктураПараметров.Вставить("Дата2", Дата2);
	СтруктураПараметров.Вставить("Периодичность", Периодичность);
	СтруктураПараметров.Вставить("СтандартОтчетности", СтандартОтчетности);
	СтруктураПараметров.Вставить("КолвоПериодовДляОсмотраНазад", КолвоПериодовДляОсмотраНазад);
	СтруктураПараметров.Вставить("МассивПоказателейДляРасчета", ПолучитьМассивПоказателейДляРасчета());
	СтруктураПараметров.Вставить("ОтборПоКонтрагенту", ФормированиеОтчетовСервер.ПолучитьСтруктуруОтбораПоКонтрагенту(КомпоновщикНастроек.ПолучитьНастройки()));
	
	Данные = ФормированиеОтчетовСервер.ПолучитьПериодичныеДанные(СтруктураПараметров);
	
	Возврат Данные;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Данные = ПолучитьДанные();
	ВнешниеДанные = Новый Структура("Данные", Данные);
	
	ФорматДаты = ОбщегоНазначенияКлиентСервер.ПолучитьФорматРедактированияДаты(Периодичность);
	
	НастройкаФормата = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("Период").Оформление.Элементы.Найти("Формат");
	НастройкаФормата.Использование = ЗначениеЗаполнено(ФорматДаты);
	НастройкаФормата.Значение = ФорматДаты;
	
	ДобавитьУсловноеОформлениеПоказателей(КомпоновщикНастроек.Настройки);
		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
